# Import libraries
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from sklearn.preprocessing import LabelEncoder, MinMaxScaler

# Load dataset
data = pd.read_csv("gameDatabase/Video_Games_Sales_as_at_22_Dec_2016.csv")

# Check for missing values
print(data.isnull().sum())

# Display the first few rows
data.head()

# Drop unnecessary columns
data = data.drop(columns=['Name', 'Developer'])

# Drop rows with missing 'Genre' or 'Global_Sales'
data = data.dropna(subset=['Genre', 'Global_Sales'])

# Handle 'User_Score': Replace 'tbd' with NaN and convert to numeric
data['User_Score'] = data['User_Score'].replace('tbd', np.nan).astype(float)

# Fill missing values for 'Critic_Score' and 'User_Score' with their mean
data['Critic_Score'] = data['Critic_Score'].fillna(data['Critic_Score'].mean())
data['User_Score'] = data['User_Score'].fillna(data['User_Score'].mean())

# Normalize 'Global_Sales' for easier regression
scaler = MinMaxScaler()
data['Global_Sales'] = scaler.fit_transform(data[['Global_Sales']])

# Convert categorical columns (Genre, Platform) into one-hot encoding
data = pd.get_dummies(data, columns=['Genre', 'Platform'], drop_first=True)

# Check the transformed data
data.head()

# Separate features (X) and target variable (y)
X = data.drop(columns=['Global_Sales'])
y = data['Global_Sales']

# Split into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Check the data types of X
print(X.dtypes)

# If any columns are object (string), display them
non_numeric_columns = X.select_dtypes(include=['object']).columns
print("Non-numeric columns:", non_numeric_columns)


from sklearn.preprocessing import LabelEncoder

# Encode non-numeric columns
label_encoder = LabelEncoder()
for col in non_numeric_columns:
    X[col] = label_encoder.fit_transform(X[col])


# One-Hot Encode non-numeric columns
X = pd.get_dummies(X, columns=non_numeric_columns, drop_first=True)

print(X.dtypes)

# Split the data again (if X has changed)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


# Train the Random Forest Regressor
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions on the test set
y_pred = model.predict(X_test)

# Calculate Mean Squared Error
mse = mean_squared_error(y_test, y_pred)
print(f"Mean Squared Error: {mse}")

import joblib


# Save the trained model
joblib.dump(model, "game_sales_model.pkl")

# Load the model (for reuse later)
loaded_model = joblib.load("game_sales_model.pkl")

# Example usage
example_predictions = loaded_model.predict(X_test[:5])
print("Example Predictions:", example_predictions)

# Define a mapping of moods to genres
mood_genre_mapping = {
    'happy': ['Action', 'Adventure', 'Sports'],
    'sad': ['Puzzle', 'Casual', 'Role-Playing'],
    'stressed': ['Strategy', 'Simulation', 'Combat'],
    "relaxed": ["simulation", "sandbox"],
    "excited": ["fps", "action"],
    "immersive": ["rpg", "adventure"],
    "creative": ["sandbox", "strategy"],
    "competitive": ["sports", "racing"],
}


# Filter recommendations based on mood not dynamic
def recommend_games_by_mood(mood, X_test, data):
    genres = mood_genre_mapping.get(mood.lower(), [])
    genre_cols = [col for col in data.columns if any(genre in col for genre in genres)]
    
    # Get predictions and filter for selected genres
    recommendations = pd.DataFrame(X_test, columns=data.columns[:-1])
    recommendations['Predicted_Sales'] = loaded_model.predict(X_test)
    
    filtered_recommendations = recommendations[recommendations[genre_cols].sum(axis=1) > 0]
    return filtered_recommendations.sort_values(by='Predicted_Sales', ascending=False).head(5)

import random

def recommend_games_by_mood(mood, X_test, original_data, processed_data, loaded_model, num_recommendations=10):
    """
    Recommend games dynamically based on mood using a trained ML model, with randomized recommendations.

    Parameters:
        mood (str): The user's mood for filtering genres.
        X_test (DataFrame): Feature data for prediction.
        original_data (DataFrame): Original dataset containing game details (e.g., 'Name').
        processed_data (DataFrame): Processed dataset used for training/prediction.
        loaded_model: Pre-trained ML model for prediction.
        num_recommendations (int): Number of games to recommend.

    Returns:
        DataFrame: Randomized `num_recommendations` recommended games including their names and predicted sales.
    """
    # Map mood to relevant genres
    genres = mood_genre_mapping.get(mood.lower(), [])
    genre_cols = [col for col in processed_data.columns if any(genre in col.lower() for genre in genres)]

    # Get predictions
    recommendations = pd.DataFrame(X_test, columns=processed_data.columns)  # Use processed column names
    recommendations['Predicted_Sales'] = loaded_model.predict(X_test)
    
    # Add game names to the recommendations from the original dataset
    recommendations['Name'] = original_data['Name'].values[:len(recommendations)]
    
    # Filter by genres related to the mood
    if genres:
        filtered_recommendations = recommendations[recommendations[genre_cols].sum(axis=1) > 0]
    else:
        print("No genres mapped to this mood. Recommending games from all genres.")
        filtered_recommendations = recommendations
    
    # If no filtered recommendations, fallback to all
    if filtered_recommendations.empty:
        print("No specific games match the mood. Recommending from all games.")
        filtered_recommendations = recommendations
    
    # Shuffle (randomize) recommendations and select the top `num_recommendations`
    randomized_recommendations = filtered_recommendations.sample(
        n=min(num_recommendations, len(filtered_recommendations)), 
        random_state=random.randint(1, 10000)  # Use a new random state for each execution
    )

    return randomized_recommendations[['Name', 'Predicted_Sales']]

# Load original dataset (before preprocessing)
original_data = pd.read_csv("gameDatabase/Video_Games_Sales_as_at_22_Dec_2016.csv")

# Example usage
mood = "excited"
num_recommendations = 10
recommendations = recommend_games_by_mood(mood, X_test, original_data, data, loaded_model, num_recommendations)

# Display recommendations
print("Recommended Games:")
print(recommendations)
